/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ProposalContract","structs":{"DonationBoxKey":[{"name":"proposalId","type":"uint64"},{"name":"donor","type":"address"}],"FutureFund":[{"name":"primary","type":"address"},{"name":"backup","type":"address"},{"name":"unlockTime","type":"uint64"},{"name":"amount","type":"uint64"},{"name":"claimed","type":"bool"}],"Proposal":[{"name":"name","type":"string"},{"name":"title","type":"string"},{"name":"description","type":"string"},{"name":"category","type":"string"},{"name":"amountRequired","type":"uint64"},{"name":"createdBy","type":"address"},{"name":"amountRaised","type":"uint64"},{"name":"milestones","type":"(string,uint64,string,uint64,uint64,uint64,bool,uint64,uint64)[]"},{"name":"noOfDonations","type":"uint64"},{"name":"noOfUniqueDonors","type":"uint64"},{"name":"currentMilestone","type":"uint64"},{"name":"createdAt","type":"uint64"}]},"methods":[{"name":"create_proposal","args":[{"type":"string","name":"name"},{"type":"string","name":"title"},{"type":"string","name":"description"},{"type":"string","name":"category"},{"type":"uint64","name":"amount_required"},{"type":"(string,uint64)[]","name":"milestones"},{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"donate_proposal","args":[{"type":"uint64","name":"proposal_id"},{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"submit_proof","args":[{"type":"uint64","name":"proposal_id"},{"type":"string","name":"proof_link"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote_milestone","args":[{"type":"uint64","name":"proposal_id"},{"type":"bool","name":"vote"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim_milestone","args":[{"type":"uint64","name":"proposal_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"refund_if_inactive","args":[{"type":"uint64","name":"proposal_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"fund_future_self","args":[{"type":"address","name":"primary"},{"type":"address","name":"backup"},{"type":"uint64","name":"unlock_time"},{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claim_future_self","args":[{"type":"uint64","name":"fund_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"no_of_proposals":{"keyType":"AVMString","valueType":"uint64","key":"bm9PZlByb3Bvc2Fscw=="},"no_of_future_funds":{"keyType":"AVMString","valueType":"uint64","key":"bm9PZkZ1dHVyZUZ1bmRz"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"proposals":{"keyType":"uint64","valueType":"Proposal","prefix":"cHJvcG9zYWxz"},"milestoneVotes":{"keyType":"uint64","valueType":"address[]","prefix":"bWlsZXN0b25lVm90ZXNf"},"donations":{"keyType":"DonationBoxKey","valueType":"uint64","prefix":"ZG9uYXRpb25z"},"futureFunds":{"keyType":"uint64","valueType":"FutureFund","prefix":"ZnV0dXJlRnVuZF8="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1174],"errorMessage":"All milestones already completed"},{"pc":[2137],"errorMessage":"Already claimed"},{"pc":[823],"errorMessage":"Amount required must be greater than 0"},{"pc":[830],"errorMessage":"At least one milestone is required"},{"pc":[1485],"errorMessage":"Creator cannot vote"},{"pc":[2118],"errorMessage":"Fund does not exist"},{"pc":[2069],"errorMessage":"Funding must be from caller"},{"pc":[1014],"errorMessage":"Goal already reached"},{"pc":[1143],"errorMessage":"Goal not reached yet"},{"pc":[714,743,1006,1010,1126,1134,1139,1214,1411,1465,1479,1715,1793,1934,2147,2158],"errorMessage":"Index access is out of bounds"},{"pc":[834],"errorMessage":"Maximum of 5 milestones allowed"},{"pc":[1790],"errorMessage":"Milestone already claimed"},{"pc":[1778],"errorMessage":"Milestone not approved"},{"pc":[2061],"errorMessage":"Must fund with positive amount"},{"pc":[650],"errorMessage":"Must pay exactly 2 Algos to create a proposal"},{"pc":[2168],"errorMessage":"Not authorized"},{"pc":[192,207,238,253,268,286,304,329],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1132],"errorMessage":"Only creator can submit proof"},{"pc":[666],"errorMessage":"Payment must be from the proposal creator"},{"pc":[658,1034],"errorMessage":"Payment must be sent to the contract address"},{"pc":[2055],"errorMessage":"Payment must go to contract"},{"pc":[1502,1754],"errorMessage":"Proof is not submitted yet"},{"pc":[1760],"errorMessage":"Proof not submitted yet"},{"pc":[855],"errorMessage":"Proposal description cannot be empty"},{"pc":[998,1118,1367,1672,1888],"errorMessage":"Proposal doesn't exist"},{"pc":[841],"errorMessage":"Proposal name cannot be empty"},{"pc":[848],"errorMessage":"Proposal title cannot be empty"},{"pc":[1539],"errorMessage":"Should have donated more than 1 Algo to vote"},{"pc":[2146],"errorMessage":"Too early to claim"},{"pc":[818],"errorMessage":"Total milestone amount must equal the required amount"},{"pc":[1510],"errorMessage":"Voting period has ended"},{"pc":[1767],"errorMessage":"Voting period not ended yet"},{"pc":[1469],"errorMessage":"You have already voted for this milestone"},{"pc":[1524,1973],"errorMessage":"You have not donated to this proposal"},{"pc":[374],"errorMessage":"can only call when creating"},{"pc":[195,210,241,256,271,289,307,332],"errorMessage":"can only call when not creating"},{"pc":[1094,1526,1978],"errorMessage":"check self.donations entry exists"},{"pc":[2124],"errorMessage":"check self.futureFunds entry exists"},{"pc":[1438],"errorMessage":"check self.milestoneVotes entry exists"},{"pc":[2074],"errorMessage":"check self.no_of_future_funds exists"},{"pc":[671,976],"errorMessage":"check self.no_of_proposals exists"},{"pc":[1004,1124,1373,1609,1675,1823,1864,1894],"errorMessage":"check self.proposals entry exists"},{"pc":[229,320,360],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"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","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type DonationBoxKey = {
  proposalId: bigint,
  donor: string
}


/**
 * Converts the ABI tuple representation of a DonationBoxKey to the struct representation
 */
export function DonationBoxKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.DonationBoxKey, APP_SPEC.structs) as DonationBoxKey
}

export type FutureFund = {
  primary: string,
  backup: string,
  unlockTime: bigint,
  amount: bigint,
  claimed: boolean
}


/**
 * Converts the ABI tuple representation of a FutureFund to the struct representation
 */
export function FutureFundFromTuple(abiTuple: [string, string, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.FutureFund, APP_SPEC.structs) as FutureFund
}

export type Proposal = {
  name: string,
  title: string,
  description: string,
  category: string,
  amountRequired: bigint,
  createdBy: string,
  amountRaised: bigint,
  milestones: [string, bigint, string, bigint, bigint, bigint, boolean, bigint, bigint][],
  noOfDonations: bigint,
  noOfUniqueDonors: bigint,
  currentMilestone: bigint,
  createdAt: bigint
}


/**
 * Converts the ABI tuple representation of a Proposal to the struct representation
 */
export function ProposalFromTuple(abiTuple: [string, string, string, string, bigint, string, bigint, [string, bigint, string, bigint, bigint, bigint, boolean, bigint, bigint][], bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Proposal, APP_SPEC.structs) as Proposal
}

/**
 * The argument types for the ProposalContract contract
 */
export type ProposalContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void': {
      name: string
      title: string
      description: string
      category: string
      amountRequired: bigint | number
      milestones: [string, bigint | number][]
      payment: AppMethodCallTransactionArgument
    }
    'donate_proposal(uint64,pay)void': {
      proposalId: bigint | number
      payment: AppMethodCallTransactionArgument
    }
    'submit_proof(uint64,string)void': {
      proposalId: bigint | number
      proofLink: string
    }
    'vote_milestone(uint64,bool)void': {
      proposalId: bigint | number
      vote: boolean
    }
    'claim_milestone(uint64)void': {
      proposalId: bigint | number
    }
    'refund_if_inactive(uint64)void': {
      proposalId: bigint | number
    }
    'fund_future_self(address,address,uint64,pay)void': {
      primary: string
      backup: string
      unlockTime: bigint | number
      payment: AppMethodCallTransactionArgument
    }
    'claim_future_self(uint64)void': {
      fundId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void': [name: string, title: string, description: string, category: string, amountRequired: bigint | number, milestones: [string, bigint | number][], payment: AppMethodCallTransactionArgument]
    'donate_proposal(uint64,pay)void': [proposalId: bigint | number, payment: AppMethodCallTransactionArgument]
    'submit_proof(uint64,string)void': [proposalId: bigint | number, proofLink: string]
    'vote_milestone(uint64,bool)void': [proposalId: bigint | number, vote: boolean]
    'claim_milestone(uint64)void': [proposalId: bigint | number]
    'refund_if_inactive(uint64)void': [proposalId: bigint | number]
    'fund_future_self(address,address,uint64,pay)void': [primary: string, backup: string, unlockTime: bigint | number, payment: AppMethodCallTransactionArgument]
    'claim_future_self(uint64)void': [fundId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type ProposalContractReturns = {
  'create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void': void
  'donate_proposal(uint64,pay)void': void
  'submit_proof(uint64,string)void': void
  'vote_milestone(uint64,bool)void': void
  'claim_milestone(uint64)void': void
  'refund_if_inactive(uint64)void': void
  'fund_future_self(address,address,uint64,pay)void': void
  'claim_future_self(uint64)void': void
}

/**
 * Defines the types of available calls and state of the ProposalContract smart contract.
 */
export type ProposalContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void' | 'create_proposal', {
      argsObj: ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']
      argsTuple: ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']
      returns: ProposalContractReturns['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']
    }>
    & Record<'donate_proposal(uint64,pay)void' | 'donate_proposal', {
      argsObj: ProposalContractArgs['obj']['donate_proposal(uint64,pay)void']
      argsTuple: ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']
      returns: ProposalContractReturns['donate_proposal(uint64,pay)void']
    }>
    & Record<'submit_proof(uint64,string)void' | 'submit_proof', {
      argsObj: ProposalContractArgs['obj']['submit_proof(uint64,string)void']
      argsTuple: ProposalContractArgs['tuple']['submit_proof(uint64,string)void']
      returns: ProposalContractReturns['submit_proof(uint64,string)void']
    }>
    & Record<'vote_milestone(uint64,bool)void' | 'vote_milestone', {
      argsObj: ProposalContractArgs['obj']['vote_milestone(uint64,bool)void']
      argsTuple: ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']
      returns: ProposalContractReturns['vote_milestone(uint64,bool)void']
    }>
    & Record<'claim_milestone(uint64)void' | 'claim_milestone', {
      argsObj: ProposalContractArgs['obj']['claim_milestone(uint64)void']
      argsTuple: ProposalContractArgs['tuple']['claim_milestone(uint64)void']
      returns: ProposalContractReturns['claim_milestone(uint64)void']
    }>
    & Record<'refund_if_inactive(uint64)void' | 'refund_if_inactive', {
      argsObj: ProposalContractArgs['obj']['refund_if_inactive(uint64)void']
      argsTuple: ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']
      returns: ProposalContractReturns['refund_if_inactive(uint64)void']
    }>
    & Record<'fund_future_self(address,address,uint64,pay)void' | 'fund_future_self', {
      argsObj: ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void']
      argsTuple: ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']
      returns: ProposalContractReturns['fund_future_self(address,address,uint64,pay)void']
    }>
    & Record<'claim_future_self(uint64)void' | 'claim_future_self', {
      argsObj: ProposalContractArgs['obj']['claim_future_self(uint64)void']
      argsTuple: ProposalContractArgs['tuple']['claim_future_self(uint64)void']
      returns: ProposalContractReturns['claim_future_self(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        noOfProposals: bigint
        noOfFutureFunds: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        proposals: Map<bigint | number, Proposal>
        milestoneVotes: Map<bigint | number, string[]>
        donations: Map<DonationBoxKey, bigint>
        futureFunds: Map<bigint | number, FutureFund>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ProposalContractSignatures = keyof ProposalContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ProposalContractNonVoidMethodSignatures = keyof ProposalContractTypes['methods'] extends infer T ? T extends keyof ProposalContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ProposalContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ProposalContractSignatures> = ProposalContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ProposalContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ProposalContractSignatures> = ProposalContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ProposalContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = ProposalContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ProposalContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ProposalContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ProposalContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ProposalContract smart contract
 */
export abstract class ProposalContractParamsFactory {
  /**
   * Constructs a no op call for the create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.title, params.args.description, params.args.category, params.args.amountRequired, params.args.milestones, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the donate_proposal(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static donateProposal(params: CallParams<ProposalContractArgs['obj']['donate_proposal(uint64,pay)void'] | ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'donate_proposal(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the submit_proof(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitProof(params: CallParams<ProposalContractArgs['obj']['submit_proof(uint64,string)void'] | ProposalContractArgs['tuple']['submit_proof(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_proof(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.proofLink],
    }
  }
  /**
   * Constructs a no op call for the vote_milestone(uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteMilestone(params: CallParams<ProposalContractArgs['obj']['vote_milestone(uint64,bool)void'] | ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote_milestone(uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote],
    }
  }
  /**
   * Constructs a no op call for the claim_milestone(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimMilestone(params: CallParams<ProposalContractArgs['obj']['claim_milestone(uint64)void'] | ProposalContractArgs['tuple']['claim_milestone(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_milestone(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the refund_if_inactive(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static refundIfInactive(params: CallParams<ProposalContractArgs['obj']['refund_if_inactive(uint64)void'] | ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'refund_if_inactive(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the fund_future_self(address,address,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundFutureSelf(params: CallParams<ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void'] | ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fund_future_self(address,address,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.primary, params.args.backup, params.args.unlockTime, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the claim_future_self(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimFutureSelf(params: CallParams<ProposalContractArgs['obj']['claim_future_self(uint64)void'] | ProposalContractArgs['tuple']['claim_future_self(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claim_future_self(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.fundId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ProposalContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ProposalContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ProposalContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ProposalContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ProposalContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ProposalContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ProposalContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ProposalContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ProposalContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ProposalContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ProposalContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ProposalContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ProposalContract smart contract
 */
export class ProposalContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ProposalContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ProposalContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ProposalContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ProposalContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ProposalContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ProposalContractClient> {
    return new ProposalContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ProposalContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ProposalContractClient> {
    return new ProposalContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ProposalContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProposal: (params: CallParams<ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `donate_proposal(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    donateProposal: (params: CallParams<ProposalContractArgs['obj']['donate_proposal(uint64,pay)void'] | ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.donateProposal(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `submit_proof(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitProof: (params: CallParams<ProposalContractArgs['obj']['submit_proof(uint64,string)void'] | ProposalContractArgs['tuple']['submit_proof(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.submitProof(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `vote_milestone(uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteMilestone: (params: CallParams<ProposalContractArgs['obj']['vote_milestone(uint64,bool)void'] | ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.voteMilestone(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `claim_milestone(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimMilestone: (params: CallParams<ProposalContractArgs['obj']['claim_milestone(uint64)void'] | ProposalContractArgs['tuple']['claim_milestone(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.claimMilestone(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `refund_if_inactive(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    refundIfInactive: (params: CallParams<ProposalContractArgs['obj']['refund_if_inactive(uint64)void'] | ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.refundIfInactive(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `fund_future_self(address,address,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundFutureSelf: (params: CallParams<ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void'] | ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.fundFutureSelf(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `claim_future_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimFutureSelf: (params: CallParams<ProposalContractArgs['obj']['claim_future_self(uint64)void'] | ProposalContractArgs['tuple']['claim_future_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ProposalContractParamsFactory.claimFutureSelf(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ProposalContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProposal: (params: CallParams<ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `donate_proposal(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    donateProposal: (params: CallParams<ProposalContractArgs['obj']['donate_proposal(uint64,pay)void'] | ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.donateProposal(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `submit_proof(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitProof: (params: CallParams<ProposalContractArgs['obj']['submit_proof(uint64,string)void'] | ProposalContractArgs['tuple']['submit_proof(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.submitProof(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `vote_milestone(uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteMilestone: (params: CallParams<ProposalContractArgs['obj']['vote_milestone(uint64,bool)void'] | ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.voteMilestone(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `claim_milestone(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimMilestone: (params: CallParams<ProposalContractArgs['obj']['claim_milestone(uint64)void'] | ProposalContractArgs['tuple']['claim_milestone(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.claimMilestone(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `refund_if_inactive(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    refundIfInactive: (params: CallParams<ProposalContractArgs['obj']['refund_if_inactive(uint64)void'] | ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.refundIfInactive(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `fund_future_self(address,address,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundFutureSelf: (params: CallParams<ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void'] | ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.fundFutureSelf(params))
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `claim_future_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimFutureSelf: (params: CallParams<ProposalContractArgs['obj']['claim_future_self(uint64)void'] | ProposalContractArgs['tuple']['claim_future_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ProposalContractParamsFactory.claimFutureSelf(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ProposalContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProposal: async (params: CallParams<ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `donate_proposal(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    donateProposal: async (params: CallParams<ProposalContractArgs['obj']['donate_proposal(uint64,pay)void'] | ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.donateProposal(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['donate_proposal(uint64,pay)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `submit_proof(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitProof: async (params: CallParams<ProposalContractArgs['obj']['submit_proof(uint64,string)void'] | ProposalContractArgs['tuple']['submit_proof(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.submitProof(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['submit_proof(uint64,string)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `vote_milestone(uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteMilestone: async (params: CallParams<ProposalContractArgs['obj']['vote_milestone(uint64,bool)void'] | ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.voteMilestone(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['vote_milestone(uint64,bool)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `claim_milestone(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimMilestone: async (params: CallParams<ProposalContractArgs['obj']['claim_milestone(uint64)void'] | ProposalContractArgs['tuple']['claim_milestone(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.claimMilestone(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['claim_milestone(uint64)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `refund_if_inactive(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    refundIfInactive: async (params: CallParams<ProposalContractArgs['obj']['refund_if_inactive(uint64)void'] | ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.refundIfInactive(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['refund_if_inactive(uint64)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `fund_future_self(address,address,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundFutureSelf: async (params: CallParams<ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void'] | ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.fundFutureSelf(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['fund_future_self(address,address,uint64,pay)void'])}
    },

    /**
     * Makes a call to the ProposalContract smart contract using the `claim_future_self(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimFutureSelf: async (params: CallParams<ProposalContractArgs['obj']['claim_future_self(uint64)void'] | ProposalContractArgs['tuple']['claim_future_self(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ProposalContractParamsFactory.claimFutureSelf(params))
      return {...result, return: result.return as unknown as (undefined | ProposalContractReturns['claim_future_self(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ProposalContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ProposalContract app
   */
  state = {
    /**
     * Methods to access global state for the current ProposalContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          noOfProposals: result.no_of_proposals,
          noOfFutureFunds: result.no_of_future_funds,
        }
      },
      /**
       * Get the current value of the no_of_proposals key in global state
       */
      noOfProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("no_of_proposals")) as bigint | undefined },
      /**
       * Get the current value of the no_of_future_funds key in global state
       */
      noOfFutureFunds: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("no_of_future_funds")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ProposalContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<bigint, Proposal>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<bigint, Proposal> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: bigint | number): Promise<Proposal | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as Proposal | undefined },
      },
      /**
       * Get values from the milestoneVotes map in box state
       */
      milestoneVotes: {
        /**
         * Get all current values of the milestoneVotes map in box state
         */
        getMap: async (): Promise<Map<bigint, string[]>> => { return (await this.appClient.state.box.getMap("milestoneVotes")) as Map<bigint, string[]> },
        /**
         * Get a current value of the milestoneVotes map by key from box state
         */
        value: async (key: bigint | number): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("milestoneVotes", key) as string[] | undefined },
      },
      /**
       * Get values from the donations map in box state
       */
      donations: {
        /**
         * Get all current values of the donations map in box state
         */
        getMap: async (): Promise<Map<DonationBoxKey, bigint>> => { return (await this.appClient.state.box.getMap("donations")) as Map<DonationBoxKey, bigint> },
        /**
         * Get a current value of the donations map by key from box state
         */
        value: async (key: DonationBoxKey): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("donations", key) as bigint | undefined },
      },
      /**
       * Get values from the futureFunds map in box state
       */
      futureFunds: {
        /**
         * Get all current values of the futureFunds map in box state
         */
        getMap: async (): Promise<Map<bigint, FutureFund>> => { return (await this.appClient.state.box.getMap("futureFunds")) as Map<bigint, FutureFund> },
        /**
         * Get a current value of the futureFunds map by key from box state
         */
        value: async (key: bigint | number): Promise<FutureFund | undefined> => { return await this.appClient.state.box.getMapValue("futureFunds", key) as FutureFund | undefined },
      },
    },
  }

  public newGroup(): ProposalContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void method call against the ProposalContract contract
       */
      createProposal(params: CallParams<ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a donate_proposal(uint64,pay)void method call against the ProposalContract contract
       */
      donateProposal(params: CallParams<ProposalContractArgs['obj']['donate_proposal(uint64,pay)void'] | ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.donateProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_proof(uint64,string)void method call against the ProposalContract contract
       */
      submitProof(params: CallParams<ProposalContractArgs['obj']['submit_proof(uint64,string)void'] | ProposalContractArgs['tuple']['submit_proof(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitProof(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a vote_milestone(uint64,bool)void method call against the ProposalContract contract
       */
      voteMilestone(params: CallParams<ProposalContractArgs['obj']['vote_milestone(uint64,bool)void'] | ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteMilestone(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claim_milestone(uint64)void method call against the ProposalContract contract
       */
      claimMilestone(params: CallParams<ProposalContractArgs['obj']['claim_milestone(uint64)void'] | ProposalContractArgs['tuple']['claim_milestone(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimMilestone(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a refund_if_inactive(uint64)void method call against the ProposalContract contract
       */
      refundIfInactive(params: CallParams<ProposalContractArgs['obj']['refund_if_inactive(uint64)void'] | ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.refundIfInactive(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fund_future_self(address,address,uint64,pay)void method call against the ProposalContract contract
       */
      fundFutureSelf(params: CallParams<ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void'] | ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundFutureSelf(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claim_future_self(uint64)void method call against the ProposalContract contract
       */
      claimFutureSelf(params: CallParams<ProposalContractArgs['obj']['claim_future_self(uint64)void'] | ProposalContractArgs['tuple']['claim_future_self(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimFutureSelf(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ProposalContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ProposalContractComposer
  }
}
export type ProposalContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<ProposalContractArgs['obj']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | ProposalContractArgs['tuple']['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void'] | undefined]>

  /**
   * Calls the donate_proposal(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  donateProposal(params?: CallParams<ProposalContractArgs['obj']['donate_proposal(uint64,pay)void'] | ProposalContractArgs['tuple']['donate_proposal(uint64,pay)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['donate_proposal(uint64,pay)void'] | undefined]>

  /**
   * Calls the submit_proof(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitProof(params?: CallParams<ProposalContractArgs['obj']['submit_proof(uint64,string)void'] | ProposalContractArgs['tuple']['submit_proof(uint64,string)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['submit_proof(uint64,string)void'] | undefined]>

  /**
   * Calls the vote_milestone(uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteMilestone(params?: CallParams<ProposalContractArgs['obj']['vote_milestone(uint64,bool)void'] | ProposalContractArgs['tuple']['vote_milestone(uint64,bool)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['vote_milestone(uint64,bool)void'] | undefined]>

  /**
   * Calls the claim_milestone(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimMilestone(params?: CallParams<ProposalContractArgs['obj']['claim_milestone(uint64)void'] | ProposalContractArgs['tuple']['claim_milestone(uint64)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['claim_milestone(uint64)void'] | undefined]>

  /**
   * Calls the refund_if_inactive(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  refundIfInactive(params?: CallParams<ProposalContractArgs['obj']['refund_if_inactive(uint64)void'] | ProposalContractArgs['tuple']['refund_if_inactive(uint64)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['refund_if_inactive(uint64)void'] | undefined]>

  /**
   * Calls the fund_future_self(address,address,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundFutureSelf(params?: CallParams<ProposalContractArgs['obj']['fund_future_self(address,address,uint64,pay)void'] | ProposalContractArgs['tuple']['fund_future_self(address,address,uint64,pay)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['fund_future_self(address,address,uint64,pay)void'] | undefined]>

  /**
   * Calls the claim_future_self(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimFutureSelf(params?: CallParams<ProposalContractArgs['obj']['claim_future_self(uint64)void'] | ProposalContractArgs['tuple']['claim_future_self(uint64)void']>): ProposalContractComposer<[...TReturns, ProposalContractReturns['claim_future_self(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ProposalContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ProposalContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ProposalContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ProposalContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ProposalContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ProposalContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ProposalContractComposerResults<TReturns>>
}
export type ProposalContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

