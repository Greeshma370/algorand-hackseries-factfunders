# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "name"}, {"type": "string", "name": "title"}, {"type": "string", "name": "description"}, {"type": "string", "name": "category"}, {"type": "uint64", "name": "amount_required"}, {"type": "(string,uint64)[]", "name": "milestones"}, {"type": "pay", "name": "payment"}], "name": "create_proposal", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}, {"type": "pay", "name": "payment"}], "name": "donate_proposal", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}, {"type": "string", "name": "proof_link"}], "name": "submit_proof", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}, {"type": "bool", "name": "vote"}], "name": "vote_milestone", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}], "name": "claim_milestone", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "proposal_id"}], "name": "refund_if_inactive", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "primary"}, {"type": "address", "name": "backup"}, {"type": "uint64", "name": "unlock_time"}, {"type": "pay", "name": "payment"}], "name": "fund_future_self", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "fund_id"}], "name": "claim_future_self", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "ProposalContract", "state": {"keys": {"box": {}, "global": {"no_of_proposals": {"key": "bm9PZlByb3Bvc2Fscw==", "keyType": "AVMString", "valueType": "uint64"}, "no_of_future_funds": {"key": "bm9PZkZ1dHVyZUZ1bmRz", "keyType": "AVMString", "valueType": "uint64"}}, "local": {}}, "maps": {"box": {"proposals": {"keyType": "uint64", "valueType": "Proposal", "prefix": "cHJvcG9zYWxz"}, "milestoneVotes": {"keyType": "uint64", "valueType": "address[]", "prefix": "bWlsZXN0b25lVm90ZXNf"}, "donations": {"keyType": "DonationBoxKey", "valueType": "uint64", "prefix": "ZG9uYXRpb25z"}, "futureFunds": {"keyType": "uint64", "valueType": "FutureFund", "prefix": "ZnV0dXJlRnVuZF8="}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"DonationBoxKey": [{"name": "proposal_id", "type": "uint64"}, {"name": "donor", "type": "address"}], "FutureFund": [{"name": "primary", "type": "address"}, {"name": "backup", "type": "address"}, {"name": "unlock_time", "type": "uint64"}, {"name": "amount", "type": "uint64"}, {"name": "claimed", "type": "bool"}], "Proposal": [{"name": "name", "type": "string"}, {"name": "title", "type": "string"}, {"name": "description", "type": "string"}, {"name": "category", "type": "string"}, {"name": "amount_required", "type": "uint64"}, {"name": "created_by", "type": "address"}, {"name": "amount_raised", "type": "uint64"}, {"name": "milestones", "type": "(string,uint64,string,uint64,uint64,uint64,bool,uint64,uint64)[]"}, {"name": "no_of_donations", "type": "uint64"}, {"name": "no_of_unique_donors", "type": "uint64"}, {"name": "current_milestone", "type": "uint64"}, {"name": "created_at", "type": "uint64"}]}, "byteCode": {"approval": "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", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 7, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1174], "errorMessage": "All milestones already completed"}, {"pc": [2137], "errorMessage": "Already claimed"}, {"pc": [823], "errorMessage": "Amount required must be greater than 0"}, {"pc": [830], "errorMessage": "At least one milestone is required"}, {"pc": [1485], "errorMessage": "Creator cannot vote"}, {"pc": [2118], "errorMessage": "Fund does not exist"}, {"pc": [2069], "errorMessage": "Funding must be from caller"}, {"pc": [1014], "errorMessage": "Goal already reached"}, {"pc": [1143], "errorMessage": "Goal not reached yet"}, {"pc": [714, 743, 1006, 1010, 1126, 1134, 1139, 1214, 1411, 1465, 1479, 1715, 1793, 1934, 2147, 2158], "errorMessage": "Index access is out of bounds"}, {"pc": [834], "errorMessage": "Maximum of 5 milestones allowed"}, {"pc": [1790], "errorMessage": "Milestone already claimed"}, {"pc": [1778], "errorMessage": "Milestone not approved"}, {"pc": [2061], "errorMessage": "Must fund with positive amount"}, {"pc": [650], "errorMessage": "Must pay exactly 2 Algos to create a proposal"}, {"pc": [2168], "errorMessage": "Not authorized"}, {"pc": [192, 207, 238, 253, 268, 286, 304, 329], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1132], "errorMessage": "Only creator can submit proof"}, {"pc": [666], "errorMessage": "Payment must be from the proposal creator"}, {"pc": [658, 1034], "errorMessage": "Payment must be sent to the contract address"}, {"pc": [2055], "errorMessage": "Payment must go to contract"}, {"pc": [1502, 1754], "errorMessage": "Proof is not submitted yet"}, {"pc": [1760], "errorMessage": "Proof not submitted yet"}, {"pc": [855], "errorMessage": "Proposal description cannot be empty"}, {"pc": [998, 1118, 1367, 1672, 1888], "errorMessage": "Proposal doesn't exist"}, {"pc": [841], "errorMessage": "Proposal name cannot be empty"}, {"pc": [848], "errorMessage": "Proposal title cannot be empty"}, {"pc": [1539], "errorMessage": "Should have donated more than 1 Algo to vote"}, {"pc": [2146], "errorMessage": "Too early to claim"}, {"pc": [818], "errorMessage": "Total milestone amount must equal the required amount"}, {"pc": [1510], "errorMessage": "Voting period has ended"}, {"pc": [1767], "errorMessage": "Voting period not ended yet"}, {"pc": [1469], "errorMessage": "You have already voted for this milestone"}, {"pc": [1524, 1973], "errorMessage": "You have not donated to this proposal"}, {"pc": [374], "errorMessage": "can only call when creating"}, {"pc": [195, 210, 241, 256, 271, 289, 307, 332], "errorMessage": "can only call when not creating"}, {"pc": [1094, 1526, 1978], "errorMessage": "check self.donations entry exists"}, {"pc": [2124], "errorMessage": "check self.futureFunds entry exists"}, {"pc": [1438], "errorMessage": "check self.milestoneVotes entry exists"}, {"pc": [2074], "errorMessage": "check self.no_of_future_funds exists"}, {"pc": [671, 976], "errorMessage": "check self.no_of_proposals exists"}, {"pc": [1004, 1124, 1373, 1609, 1675, 1823, 1864, 1894], "errorMessage": "check self.proposals entry exists"}, {"pc": [229, 320, 360], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class DonationBoxKey:
    """Struct for DonationBoxKey"""
    proposal_id: int
    donor: str

@dataclasses.dataclass(frozen=True)
class FutureFund:
    """Struct for FutureFund"""
    primary: str
    backup: str
    unlock_time: int
    amount: int
    claimed: bool

@dataclasses.dataclass(frozen=True)
class Proposal:
    """Struct for Proposal"""
    name: str
    title: str
    description: str
    category: str
    amount_required: int
    created_by: str
    amount_raised: int
    milestones: list[tuple[str, int, str, int, int, int, bool, int, int]]
    no_of_donations: int
    no_of_unique_donors: int
    current_milestone: int
    created_at: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateProposalArgs:
    """Dataclass for create_proposal arguments"""
    name: str
    title: str
    description: str
    category: str
    amount_required: int
    milestones: list[tuple[str, int]]
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DonateProposalArgs:
    """Dataclass for donate_proposal arguments"""
    proposal_id: int
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "donate_proposal(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SubmitProofArgs:
    """Dataclass for submit_proof arguments"""
    proposal_id: int
    proof_link: str

    @property
    def abi_method_signature(self) -> str:
        return "submit_proof(uint64,string)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteMilestoneArgs:
    """Dataclass for vote_milestone arguments"""
    proposal_id: int
    vote: bool

    @property
    def abi_method_signature(self) -> str:
        return "vote_milestone(uint64,bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClaimMilestoneArgs:
    """Dataclass for claim_milestone arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "claim_milestone(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RefundIfInactiveArgs:
    """Dataclass for refund_if_inactive arguments"""
    proposal_id: int

    @property
    def abi_method_signature(self) -> str:
        return "refund_if_inactive(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FundFutureSelfArgs:
    """Dataclass for fund_future_self arguments"""
    primary: str
    backup: str
    unlock_time: int
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "fund_future_self(address,address,uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClaimFutureSelfArgs:
    """Dataclass for claim_future_self arguments"""
    fund_id: int

    @property
    def abi_method_signature(self) -> str:
        return "claim_future_self(uint64)void"


class ProposalContractParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_proposal(
        self,
        args: tuple[str, str, str, str, int, list[tuple[str, int]], algokit_utils.AppMethodCallTransactionArgument] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void",
            "args": method_args,
        }))

    def donate_proposal(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | DonateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "donate_proposal(uint64,pay)void",
            "args": method_args,
        }))

    def submit_proof(
        self,
        args: tuple[int, str] | SubmitProofArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "submit_proof(uint64,string)void",
            "args": method_args,
        }))

    def vote_milestone(
        self,
        args: tuple[int, bool] | VoteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote_milestone(uint64,bool)void",
            "args": method_args,
        }))

    def claim_milestone(
        self,
        args: tuple[int] | ClaimMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_milestone(uint64)void",
            "args": method_args,
        }))

    def refund_if_inactive(
        self,
        args: tuple[int] | RefundIfInactiveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "refund_if_inactive(uint64)void",
            "args": method_args,
        }))

    def fund_future_self(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | FundFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund_future_self(address,address,uint64,pay)void",
            "args": method_args,
        }))

    def claim_future_self(
        self,
        args: tuple[int] | ClaimFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_future_self(uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class ProposalContractCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_proposal(
        self,
        args: tuple[str, str, str, str, int, list[tuple[str, int]], algokit_utils.AppMethodCallTransactionArgument] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void",
            "args": method_args,
        }))

    def donate_proposal(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | DonateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "donate_proposal(uint64,pay)void",
            "args": method_args,
        }))

    def submit_proof(
        self,
        args: tuple[int, str] | SubmitProofArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "submit_proof(uint64,string)void",
            "args": method_args,
        }))

    def vote_milestone(
        self,
        args: tuple[int, bool] | VoteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote_milestone(uint64,bool)void",
            "args": method_args,
        }))

    def claim_milestone(
        self,
        args: tuple[int] | ClaimMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_milestone(uint64)void",
            "args": method_args,
        }))

    def refund_if_inactive(
        self,
        args: tuple[int] | RefundIfInactiveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "refund_if_inactive(uint64)void",
            "args": method_args,
        }))

    def fund_future_self(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | FundFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund_future_self(address,address,uint64,pay)void",
            "args": method_args,
        }))

    def claim_future_self(
        self,
        args: tuple[int] | ClaimFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_future_self(uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class ProposalContractSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_proposal(
        self,
        args: tuple[str, str, str, str, int, list[tuple[str, int]], algokit_utils.AppMethodCallTransactionArgument] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def donate_proposal(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | DonateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "donate_proposal(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def submit_proof(
        self,
        args: tuple[int, str] | SubmitProofArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "submit_proof(uint64,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vote_milestone(
        self,
        args: tuple[int, bool] | VoteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote_milestone(uint64,bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_milestone(
        self,
        args: tuple[int] | ClaimMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_milestone(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def refund_if_inactive(
        self,
        args: tuple[int] | RefundIfInactiveArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "refund_if_inactive(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def fund_future_self(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | FundFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund_future_self(address,address,uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_future_self(
        self,
        args: tuple[int] | ClaimFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_future_self(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    no_of_proposals: int
    no_of_future_funds: int

class ProposalContractState:
    """Methods to access state for the current ProposalContract app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def no_of_proposals(self) -> int:
        """Get the current value of the no_of_proposals key in global_state state"""
        value = self.app_client.state.global_state.get_value("no_of_proposals")
        if isinstance(value, dict) and "uint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def no_of_future_funds(self) -> int:
        """Get the current value of the no_of_future_funds key in global_state state"""
        value = self.app_client.state.global_state.get_value("no_of_future_funds")
        if isinstance(value, dict) and "uint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "Proposal": Proposal,
            "FutureFund": FutureFund
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def proposals(self) -> "_MapState[int, Proposal]":
        """Get values from the proposals map in box state"""
        return _MapState(
            self.app_client.state.box,
            "proposals",
            self._struct_classes.get("Proposal")
        )

    @property
    def milestone_votes(self) -> "_MapState[int, list[str]]":
        """Get values from the milestoneVotes map in box state"""
        return _MapState(
            self.app_client.state.box,
            "milestoneVotes",
            None
        )

    @property
    def donations(self) -> "_MapState[DonationBoxKey, int]":
        """Get values from the donations map in box state"""
        return _MapState(
            self.app_client.state.box,
            "donations",
            None
        )

    @property
    def future_funds(self) -> "_MapState[int, FutureFund]":
        """Get values from the futureFunds map in box state"""
        return _MapState(
            self.app_client.state.box,
            "futureFunds",
            self._struct_classes.get("FutureFund")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class ProposalContractClient:
    """Client for interacting with ProposalContract smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = ProposalContractParams(self.app_client)
        self.create_transaction = ProposalContractCreateTransactionParams(self.app_client)
        self.send = ProposalContractSend(self.app_client)
        self.state = ProposalContractState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "ProposalContractClient":
        return ProposalContractClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ProposalContractClient":
        return ProposalContractClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ProposalContractClient":
        return ProposalContractClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "ProposalContractComposer":
        return ProposalContractComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["donate_proposal(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["submit_proof(uint64,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote_milestone(uint64,bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_milestone(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["refund_if_inactive(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["fund_future_self(address,address,uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_future_self(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class ProposalContractBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating ProposalContract contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class ProposalContractFactory(algokit_utils.TypedAppFactoryProtocol[ProposalContractBareCallCreateParams, None, None]):
    """Factory for deploying and managing ProposalContractClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = ProposalContractFactoryParams(self.app_factory)
        self.create_transaction = ProposalContractFactoryCreateTransaction(self.app_factory)
        self.send = ProposalContractFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: ProposalContractBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[ProposalContractClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return ProposalContractClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ProposalContractClient:
        """Get an app client by creator address and name"""
        return ProposalContractClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ProposalContractClient:
        """Get an app client by app ID"""
        return ProposalContractClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class ProposalContractFactoryParams:
    """Parameters for creating transactions for ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ProposalContractFactoryCreateParams(app_factory)
        self.update = ProposalContractFactoryUpdateParams(app_factory)
        self.delete = ProposalContractFactoryDeleteParams(app_factory)

class ProposalContractFactoryCreateParams:
    """Parameters for 'create' operations of ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create_proposal(
        self,
        args: tuple[str, str, str, str, int, list[tuple[str, int]], algokit_utils.AppMethodCallTransactionArgument] | CreateProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def donate_proposal(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | DonateProposalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the donate_proposal(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "donate_proposal(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def submit_proof(
        self,
        args: tuple[int, str] | SubmitProofArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the submit_proof(uint64,string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "submit_proof(uint64,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vote_milestone(
        self,
        args: tuple[int, bool] | VoteMilestoneArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote_milestone(uint64,bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote_milestone(uint64,bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_milestone(
        self,
        args: tuple[int] | ClaimMilestoneArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_milestone(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_milestone(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def refund_if_inactive(
        self,
        args: tuple[int] | RefundIfInactiveArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the refund_if_inactive(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "refund_if_inactive(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def fund_future_self(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | FundFutureSelfArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the fund_future_self(address,address,uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "fund_future_self(address,address,uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_future_self(
        self,
        args: tuple[int] | ClaimFutureSelfArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_future_self(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_future_self(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class ProposalContractFactoryUpdateParams:
    """Parameters for 'update' operations of ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class ProposalContractFactoryDeleteParams:
    """Parameters for 'delete' operations of ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class ProposalContractFactoryCreateTransaction:
    """Create transactions for ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ProposalContractFactoryCreateTransactionCreate(app_factory)


class ProposalContractFactoryCreateTransactionCreate:
    """Create new instances of ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class ProposalContractFactorySend:
    """Send calls to ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ProposalContractFactorySendCreate(app_factory)


class ProposalContractFactorySendCreate:
    """Send create calls to ProposalContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[ProposalContractClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return ProposalContractClient(result[0]), result[1]


class ProposalContractComposer:
    """Composer for creating transaction groups for ProposalContract contract calls"""

    def __init__(self, client: "ProposalContractClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create_proposal(
        self,
        args: tuple[str, str, str, str, int, list[tuple[str, int]], algokit_utils.AppMethodCallTransactionArgument] | CreateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_proposal(string,string,string,string,uint64,(string,uint64)[],pay)void", v
            )
        )
        return self

    def donate_proposal(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | DonateProposalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.donate_proposal(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "donate_proposal(uint64,pay)void", v
            )
        )
        return self

    def submit_proof(
        self,
        args: tuple[int, str] | SubmitProofArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.submit_proof(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "submit_proof(uint64,string)void", v
            )
        )
        return self

    def vote_milestone(
        self,
        args: tuple[int, bool] | VoteMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote_milestone(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote_milestone(uint64,bool)void", v
            )
        )
        return self

    def claim_milestone(
        self,
        args: tuple[int] | ClaimMilestoneArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_milestone(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_milestone(uint64)void", v
            )
        )
        return self

    def refund_if_inactive(
        self,
        args: tuple[int] | RefundIfInactiveArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.refund_if_inactive(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "refund_if_inactive(uint64)void", v
            )
        )
        return self

    def fund_future_self(
        self,
        args: tuple[str, str, int, algokit_utils.AppMethodCallTransactionArgument] | FundFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.fund_future_self(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "fund_future_self(address,address,uint64,pay)void", v
            )
        )
        return self

    def claim_future_self(
        self,
        args: tuple[int] | ClaimFutureSelfArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_future_self(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_future_self(uint64)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "ProposalContractComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "ProposalContractComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
