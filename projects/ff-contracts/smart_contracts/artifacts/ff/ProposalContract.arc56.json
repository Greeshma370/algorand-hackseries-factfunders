{
    "name": "ProposalContract",
    "structs": {
        "DonationBoxKey": [
            {
                "name": "proposal_id",
                "type": "uint64"
            },
            {
                "name": "donor",
                "type": "address"
            }
        ],
        "Proposal": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "title",
                "type": "string"
            },
            {
                "name": "description",
                "type": "string"
            },
            {
                "name": "category",
                "type": "string"
            },
            {
                "name": "amount_required",
                "type": "uint64"
            },
            {
                "name": "created_by",
                "type": "address"
            },
            {
                "name": "amount_raised",
                "type": "uint64"
            },
            {
                "name": "milestones",
                "type": "(string,uint64,string,uint64,uint64,uint64,bool,uint64,uint64)[]"
            },
            {
                "name": "no_of_donations",
                "type": "uint64"
            },
            {
                "name": "no_of_unique_donors",
                "type": "uint64"
            },
            {
                "name": "current_milestone",
                "type": "uint64"
            },
            {
                "name": "created_at",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create_proposal",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "title"
                },
                {
                    "type": "string",
                    "name": "description"
                },
                {
                    "type": "string",
                    "name": "category"
                },
                {
                    "type": "uint64",
                    "name": "amount_required"
                },
                {
                    "type": "(string,uint64)[]",
                    "name": "milestones"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "donate_proposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "submit_proof",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "string",
                    "name": "proof_link"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote_milestone",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "bool",
                    "name": "vote"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_milestone",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "refund_if_inactive",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "no_of_proposals": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bm9PZlByb3Bvc2Fscw=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "proposals": {
                    "keyType": "uint64",
                    "valueType": "Proposal",
                    "prefix": "cHJvcG9zYWxz"
                },
                "milestoneVotes": {
                    "keyType": "uint64",
                    "valueType": "address[]",
                    "prefix": "bWlsZXN0b25lVm90ZXNf"
                },
                "donations": {
                    "keyType": "DonationBoxKey",
                    "valueType": "uint64",
                    "prefix": "ZG9uYXRpb25z"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1079
                    ],
                    "errorMessage": "All milestones already completed"
                },
                {
                    "pc": [
                        730
                    ],
                    "errorMessage": "Amount required must be greater than 0"
                },
                {
                    "pc": [
                        737
                    ],
                    "errorMessage": "At least one milestone is required"
                },
                {
                    "pc": [
                        1390
                    ],
                    "errorMessage": "Creator cannot vote"
                },
                {
                    "pc": [
                        919
                    ],
                    "errorMessage": "Goal already reached"
                },
                {
                    "pc": [
                        1048
                    ],
                    "errorMessage": "Goal not reached yet"
                },
                {
                    "pc": [
                        620,
                        649,
                        911,
                        915,
                        1031,
                        1039,
                        1044,
                        1119,
                        1316,
                        1370,
                        1384,
                        1621,
                        1701,
                        1842
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        741
                    ],
                    "errorMessage": "Maximum of 5 milestones allowed"
                },
                {
                    "pc": [
                        1698
                    ],
                    "errorMessage": "Milestone already claimed"
                },
                {
                    "pc": [
                        1684
                    ],
                    "errorMessage": "Milestone not approved"
                },
                {
                    "pc": [
                        557
                    ],
                    "errorMessage": "Must pay exactly 2 Algos to create a proposal"
                },
                {
                    "pc": [
                        145,
                        160,
                        175,
                        193,
                        211,
                        236
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1037
                    ],
                    "errorMessage": "Only creator can submit proof"
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "Payment must be from the proposal creator"
                },
                {
                    "pc": [
                        565,
                        939
                    ],
                    "errorMessage": "Payment must be sent to the contract address"
                },
                {
                    "pc": [
                        1407,
                        1660
                    ],
                    "errorMessage": "Proof is not submitted yet"
                },
                {
                    "pc": [
                        1666
                    ],
                    "errorMessage": "Proof not submitted yet"
                },
                {
                    "pc": [
                        762
                    ],
                    "errorMessage": "Proposal description cannot be empty"
                },
                {
                    "pc": [
                        903,
                        1023,
                        1272,
                        1578,
                        1796
                    ],
                    "errorMessage": "Proposal doesn't exist"
                },
                {
                    "pc": [
                        748
                    ],
                    "errorMessage": "Proposal name cannot be empty"
                },
                {
                    "pc": [
                        755
                    ],
                    "errorMessage": "Proposal title cannot be empty"
                },
                {
                    "pc": [
                        1444
                    ],
                    "errorMessage": "Should have donated more than 1 algos to vote"
                },
                {
                    "pc": [
                        725
                    ],
                    "errorMessage": "Total milestone amount must equal the required amount"
                },
                {
                    "pc": [
                        1415
                    ],
                    "errorMessage": "Voting period has ended"
                },
                {
                    "pc": [
                        1673
                    ],
                    "errorMessage": "Voting period not ended yet"
                },
                {
                    "pc": [
                        1374
                    ],
                    "errorMessage": "You have already voted for this milestone"
                },
                {
                    "pc": [
                        1429,
                        1881
                    ],
                    "errorMessage": "You have not donated to this proposal"
                },
                {
                    "pc": [
                        281
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        148,
                        163,
                        178,
                        196,
                        214,
                        239
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        999,
                        1431,
                        1886
                    ],
                    "errorMessage": "check self.donations entry exists"
                },
                {
                    "pc": [
                        1343
                    ],
                    "errorMessage": "check self.milestoneVotes entry exists"
                },
                {
                    "pc": [
                        577,
                        882
                    ],
                    "errorMessage": "check self.no_of_proposals exists"
                },
                {
                    "pc": [
                        909,
                        1029,
                        1278,
                        1515,
                        1581,
                        1731,
                        1772,
                        1802
                    ],
                    "errorMessage": "check self.proposals entry exists"
                },
                {
                    "pc": [
                        227,
                        267
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}